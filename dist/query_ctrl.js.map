{"version":3,"sources":["../src/query_ctrl.js"],"names":["_","QueryCtrl","Common","GenericDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","target","table","strings","selectTable","type","pCols","selCol","allCols","advanced","filterObj","selFilterOp","filterVal","filterVal2","whereArray","name","value","op","randomId","param","start","toDate","panelCtrl","dashboard","time","from","end","datasource","metricFindQuery","then","transformToSegments","rawQuery","selectedTable","includes","getColumns","result","map","filtered","d","i","text","unshift","selectColumn","unfiltered","refresh","colName","allOperators","push","index","pIndex","splice","length","filteredIndex","each","Math","floor","random","fieldName","isAggregateField","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["// The MIT License (MIT)\n\n// Copyright (c) 2016 Grafana\n// Copyright 2017, Juniper Networks, Inc.\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport _ from 'lodash';\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!';\nimport Common from './common';\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, uiSegmentSrv) {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.target.table = this.target.table || Common.strings.selectTable;\n    // TODO: support the table view.\n    // TODO: support rawQuery\n    this.target.type = this.target.type || 'timeserie';\n    this.target.pCols = this.target.pCols || false;\n    this.target.selCol = this.target.selCol || null;\n    this.target.allCols = this.target.allCols || null;\n    this.target.advanced = this.target.advanced || false;\n    this.target.filterObj = this.target.filterObj || {};\n    this.target.filterObj.selFilterOp = this.target.filterObj.selFilterOp || null;\n    this.target.filterObj.filterVal = this.target.filterObj.filterVal || null;\n    this.target.filterObj.filterVal2 = this.target.filterObj.filterVal2 || null;\n    this.target.whereArray = this.target.whereArray || [[{name: 'name', value: null, op: 'PREFIX'}]];\n    this.randomId = this.randomId || 0;\n  }\n\n  getTables() {\n    let param = {};\n    param.start = Common.toDate(this.panelCtrl.dashboard.time.from);\n    param.end = Common.toDate(this.panelCtrl.dashboard.time.end);\n    return this.datasource.metricFindQuery(param)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n      // return this.datasource.metricFindQuery(this.target);\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeTable() {\n    let selectedTable = this.target.table;\n    if (!selectedTable.includes(Common.strings.selectTable)) {\n      this.datasource.getColumns(selectedTable).then((result) => {\n        this.target.pCols = _.map(result.filtered, (d, i) => {\n          return d.text;\n        });\n        this.target.pCols.unshift(Common.strings.selectColumn);\n        // this.target.pCols.unshift({text:Common.strings.selectColumn});\n        this.target.allCols = result.unfiltered;\n      });\n    }\n  }\n\n  colSelect() {\n    // this.target.selCol = _.find(this.target.pCols, (obj)=>{\n    //   return obj.text === this.target.viewSelCol;\n    // });\n    if (this.target.selCol) { this.panelCtrl.refresh(); } // Asks the panel to refresh data.\n  }\n\n  getOperators(colName = null) {\n    if (colName != null) {\n      // TODO: filter operators based on col datatype\n      return Common.allOperators;\n    }\n    return Common.allOperators;\n  }\n\n  addOrRow() {\n    this.target.whereArray.push([{}]);\n  }\n\n  addAndRow(index) {\n    this.target.whereArray[index].push({});\n  }\n\n  delAndRow(pIndex, index) {\n    this.target.whereArray[pIndex].splice(index, 1);\n    if (this.target.whereArray[pIndex].length === 0) { this.target.whereArray.splice(pIndex, 1); }\n  }\n\n  getIndexCols() {\n    let filteredIndex = [];\n    _.each(this.target.allCols, (d, i) => {\n      if (d.index === true) { filteredIndex.push(d.text); }\n    });\n    return filteredIndex;\n  }\n\n  getRandomId() {\n    // TODO: Solve this using the tabindex of the pointer a element up in the\n    // parent hierarchy.\n    this.randomId = 'chechbox-id' + Math.floor(Math.random() * 10000000);\n    return this.randomId;\n  }\n\n  isAggregateField(fieldName) {\n    return Common.isAggregateField(fieldName);\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}